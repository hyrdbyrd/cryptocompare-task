{"version":3,"sources":["components/Chart/Chart.js","serviceWorker.js","utils.js","index.js"],"names":["ChartComponent","green","red","blue","_this$props","this","props","type","initialData","data","width","ratio","min","max","forEach","d","close","ema1","ema","id","options","windowSize","merge","c","accessor","ema2","grads","algo","accumulator","_ref","_ref2","Object","slicedToArray","prev","now","prevShortTerm","prevLongTerm","nowShortTerm","nowLongTerm","longShort","defaultAnnotationProps","onClick","console","log","bind","longAnnotationProps","objectSpread","fill","className","tooltip","y","_ref3","yScale","datum","low","path","_ref4","x","concat","shortAnnotationProps","_ref5","high","_ref6","calculatedData","_xScaleProvider","discontinuousTimeScaleProvider","inputDateAccessor","date","xScaleProvider","xScale","xAccessor","displayXAccessor","xExtents","last","Math","length","cnCandle","cn","cnRightBar","cnBottomBar","react_default","a","createElement","es","height","window","innerHeight","margin","left","right","top","bottom","seriesName","yExtents","volume","origin","w","h","timeFormat","series","yAccessor","stroke","axes","axisAt","orient","ticks","coordinates","at","displayFormat","format","rectWidth","strokeOpacity","opacity","wickClassName","strokeWidth","open","wickStroke","itemType","edgeAt","lineStroke","lineOpacity","annotation","with","SvgPathAnnotation","when","usingProps","fontFamily","fontSize","children","React","Component","defaultProps","fitWidth","Boolean","location","hostname","match","render","Chart_Chart","Data","volumefrom","volumeto","Date","time","abs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed1c4602.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport algo from 'react-stockcharts/lib/algorithm';\n\nimport { format } from 'd3-format';\n\nimport { cn } from '@bem-react/classname';\n\nimport { ChartCanvas, Chart } from 'react-stockcharts';\nimport { BarSeries, CandlestickSeries } from 'react-stockcharts/lib/series';\nimport { XAxis, YAxis } from 'react-stockcharts/lib/axes';\nimport { CrossHairCursor, MouseCoordinateY, EdgeIndicator } from 'react-stockcharts/lib/coordinates';\n\nimport { timeFormat } from 'd3-time-format';\n\nimport { ToolTipText } from 'react-stockcharts/lib/tooltip';\n\nimport { ema } from 'react-stockcharts/lib/indicator';\nimport { discontinuousTimeScaleProvider } from 'react-stockcharts/lib/scale';\n\nimport { Annotate, SvgPathAnnotation } from 'react-stockcharts/lib/annotation';\nimport { fitWidth } from 'react-stockcharts/lib/helper';\nimport { last } from 'react-stockcharts/lib/utils';\n\nimport './Chart.css';\n\nclass ChartComponent extends React.Component {\n    render() {\n        const green = 'rgb(39, 163, 108)';\n        const red = 'rgb(203, 64, 97)';\n        const gray = 'rgb(176, 189, 206)';\n        const blue = 'rgb(35, 171, 221)';\n\n        const { type, data: initialData, width, ratio } = this.props;\n\n        let min = initialData[0];\n        let max = initialData[0];\n\n        initialData.forEach((d) => {\n            if (d.close > max.close) {\n                max = d;\n            }\n\n            if (d.close < min.close) {\n                min = d;\n            }\n        });\n\n        const ema1 = ema()\n            .id(0)\n            .options({ windowSize: 1 })\n            .merge((d, c) => { d.ema1 = c; })\n            .accessor(d => d.ema1);\n\n        const ema2 = ema()\n            .id(2)\n            .options({ windowSize: 2 })\n            .merge((d, c) => { d.ema2 = c; })\n            .accessor(d => d.ema2);\n\n        const grads = algo()\n            .windowSize(2)\n            .accumulator(([prev, now]) => {\n                const { ema1: prevShortTerm, ema2: prevLongTerm } = prev;\n                const { ema1: nowShortTerm, ema2: nowLongTerm } = now;\n                if (prevShortTerm < prevLongTerm && nowShortTerm > nowLongTerm) return \"LONG\";\n                if (prevShortTerm > prevLongTerm && nowShortTerm < nowLongTerm) return \"SHORT\";\n            })\n            .merge((d, c) => { d.longShort = c; });\n\n        const defaultAnnotationProps = {\n            onClick: console.log.bind(console),\n        };\n\n        const longAnnotationProps = {\n            ...defaultAnnotationProps,\n            fill: green,\n            className: 'ToLong',\n            tooltip: 'Close long',\n            y: ({ yScale, datum }) => yScale(datum.low),\n            path: ({ x, y }) => `M ${x} ${y} ${5 + x} ${10 + y} ${x - 5} ${10 + y} Z`\n        };\n\n        const shortAnnotationProps = {\n            ...defaultAnnotationProps,\n            fill: red,\n            className: 'ToShort',\n            tooltip: 'Close short',\n            y: ({ yScale, datum }) => yScale(datum.high),\n            path: ({ x, y }) => `M ${5 + x} ${y} ${x - 5} ${y} ${x} ${y + 10} Z`\n        };\n\n        const calculatedData = grads(ema1(ema2(initialData)));\n\n        const xScaleProvider = discontinuousTimeScaleProvider.inputDateAccessor(d => d.date);\n        const { data, xScale, xAccessor, displayXAccessor } = xScaleProvider(calculatedData);\n\n        const start = xAccessor(last(data));\n        const end = xAccessor(data[Math.max(0, data.length - 150)]);\n        const xExtents = [start, end];\n\n        const cnCandle = cn('Candle');\n        const cnRightBar = cn('RightBar');\n        const cnBottomBar = cn('BottomBar');\n\n        return (\n            <ChartCanvas\n                width={width}\n                height={window.innerHeight - 100}\n                margin={{ left: 10, right: 70, top: 70, bottom: 70 }}\n                seriesName='BTC/USD'\n                ratio={ratio}\n                type={type}\n                data={data}\n                xScale={xScale}\n                xAccessor={xAccessor}\n                displayXAccessor={displayXAccessor}\n                xExtents={xExtents}\n                className='Chart'\n            >\n                <Chart\n                    id={5}\n                    height={150}\n                    yExtents={d => d.volume}\n                    origin={(w, h) => [0, h - 150]}\n                    timeFormat={timeFormat('%d %m')}\n                >\n                    <BarSeries yAccessor={d => d.volume} fill={gray} stroke={false} />\n                </Chart>\n                <Chart id={6} yExtents={[d => [d.high, d.low]]}>\n                    <YAxis axisAt='right' orient='right' ticks={10} className={cnRightBar()} />\n                    <XAxis axisAt='bottom' orient='bottom' ticks={2} className={cnBottomBar()} />\n\n                    <MouseCoordinateY\n                        at='right'\n                        orient='right'\n                        displayFormat={format('.2f')}\n                        fill={blue}\n                        rectWidth={70}\n                        strokeOpacity={1}\n                        opacity={1}\n                    />\n\n                    <CandlestickSeries\n                        className={cnCandle()}\n                        wickClassName={cnCandle('Wick')}\n                        stroke={() => 'rgba(0, 0, 0, 0)'}\n                        strokeWidth={10}\n                        fill={d => (d.close > d.open ? green : red)}\n                        wickStroke={d => (d.close > d.open ? green : red)}\n                    />\n\n                    <EdgeIndicator\n                        itemType='first'\n                        orient='right'\n                        edgeAt='right'\n                        yAccessor={() => Math.min(min.close, min.open)}\n                        lineStroke={red}\n                        lineOpacity={1}\n                        fill={red}\n                        rectWidth={70}\n                    />\n\n                    <EdgeIndicator\n                        itemType='first'\n                        orient='right'\n                        edgeAt='right'\n                        yAccessor={() => Math.max(max.close, max.open)}\n                        lineStroke={green}\n                        lineOpacity={1}\n                        fill={green}\n                        rectWidth={70}\n                    />\n\n                    <Annotate\n                        with={SvgPathAnnotation}\n                        when={d => d.longShort === 'LONG'}\n                        usingProps={longAnnotationProps}\n                    />\n\n                    <Annotate\n                        with={SvgPathAnnotation}\n                        when={d => d.longShort === 'SHORT'}\n                        usingProps={shortAnnotationProps}\n                    />\n\n                    <ToolTipText\n                        fontFamily='Arial'\n                        fontSize={20}\n                        children='BTC/USD'\n                    />\n                </Chart>\n                <CrossHairCursor opacity={1} stroke={blue} />\n            </ChartCanvas>\n        );\n    }\n}\n\nChartComponent.propTypes = {\n    data: PropTypes.array.isRequired,\n    width: PropTypes.number.isRequired,\n    ratio: PropTypes.number.isRequired,\n    type: PropTypes.oneOf(['svg', 'hybrid']).isRequired\n};\n\nChartComponent.defaultProps = {\n    type: 'svg'\n};\n\nexport default fitWidth(ChartComponent);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function parseData(data) {\n    data.forEach(d => {\n        const {volumefrom, volumeto} = d;\n\n        d.date = new Date(d.time);\n\n        d.close = +d.close;\n        d.open = +d.open;\n\n        d.high = +d.high;\n        d.low = +d.low;\n\n        d.volume = Math.abs(volumefrom - volumeto);\n    });\n\n    return data;\n}\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport { parseData } from './utils';\n\nimport Chart from './components/Chart/Chart';\n\nimport data from './data.json';\n\nimport { unregister, register } from './serviceWorker';\n\nimport './index.css';\n\nfunction ChartComponent({data}) {\n    return <Chart data={data} />;\n}\n\nrender(\n    <ChartComponent data={parseData(data.Data)} />,\n    document.getElementById('root')\n);\n\nif (process.env.NODE_ENV !== 'prodution') {\n    unregister();\n} else {\n    register();\n}\n"],"sourceRoot":""}